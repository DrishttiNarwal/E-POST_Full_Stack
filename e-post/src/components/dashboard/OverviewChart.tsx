import React from "react"; // Import React
import { Area, AreaChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from "recharts"; // Standard recharts imports

// Import necessary components AND the ChartConfig type from your chart UI file
import {
    ChartContainer,
    ChartTooltip,       // Keep if CustomTooltip uses it
    ChartTooltipContent,  // Keep if CustomTooltip uses it
    type ChartConfig     // Import the type definition
} from "../ui/chart"; // Adjust path as needed

// --- Define the expected data structure for a single point ---
interface ChartDataPoint {
  date: string; // Or Date object, depending on API and desired formatting
  parcels: number;
  // Add other potential data points if needed (e.g., revenue)
}

// --- Define Component Props ---
interface OverviewChartProps {
  data: ChartDataPoint[]; // Expect data to be passed as a prop
  // Optional: Add props for customization (e.g., colors)
}

// Default data can be used as fallback or for initial rendering while loading
const defaultData: ChartDataPoint[] = Array.from({ length: 10 }, (_, i) => ({
    date: `Day ${i + 1}`,
    parcels: 0,
}));

// --- Define the Chart Configuration ---
// This object tells ChartContainer how to style the 'parcels' data key
const chartConfig = {
  parcels: {
    label: "Parcels", // Label used in tooltips/legends if applicable
    color: "hsl(var(--primary))", // Color should match the Area stroke/fill
  },
  // Add entries for other dataKeys if you plot more data (e.g., revenue)
  // revenue: { label: "Revenue", color: "hsl(var(--secondary))" },
} satisfies ChartConfig; // Use 'satisfies' for type checking the config object

// --- Overview Chart Component ---
export function OverviewChart({ data = defaultData }: OverviewChartProps) {
  // Use the passed-in data, or defaultData if none is provided or if data is empty
  const chartData = data && data.length > 0 ? data : defaultData;

  return (
    // Pass the required 'config' prop to ChartContainer
    <ChartContainer config={chartConfig} className="h-[300px] w-full">
      <ResponsiveContainer width="100%" height="100%">
        <AreaChart
          data={chartData} // Use the data passed via props
          margin={{
            top: 10,
            right: 10,
            left: -10,
            bottom: 0,
          }}
        >
          {/* Define the gradient fill */}
          <defs>
            <linearGradient id="chartGradientFill" x1="0" y1="0" x2="0" y2="1">
              {/* Use the primary color defined in the config via CSS variable */}
              <stop offset="5%" stopColor="var(--color-parcels)" stopOpacity={0.3} />
              <stop offset="95%" stopColor="var(--color-parcels)" stopOpacity={0} />
            </linearGradient>
          </defs>
          {/* X Axis Configuration */}
          <XAxis
            dataKey="date"
            stroke="hsl(var(--muted-foreground))"
            fontSize={10}
            tickLine={false}
            axisLine={false}
            tickFormatter={(value: string) => {
              if (typeof value === 'string' && value.includes(' ')) {
                return value.split(" ")[1];
              }
              return value;
            }}
            interval="preserveStartEnd"
          />
          {/* Y Axis Configuration */}
          <YAxis
            stroke="hsl(var(--muted-foreground))"
            fontSize={10}
            tickLine={false}
            axisLine={false}
            tickFormatter={(value: number) => `${value}`}
            width={30}
          />
          {/* Custom Tooltip */}
          <Tooltip
            cursor={{ stroke: 'hsl(var(--border))', strokeWidth: 1, strokeDasharray: '3 3' }}
            content={<CustomTooltip />} // Pass props if CustomTooltip needs them directly
          />
          {/* The Area itself */}
          <Area
            type="monotone"
            dataKey="parcels" // This key must exist in chartConfig
            // Use the CSS variable generated by ChartStyle based on the config
            stroke="var(--color-parcels)"
            fillOpacity={1}
            fill="url(#chartGradientFill)"
            strokeWidth={2}
            dot={false}
          />
        </AreaChart>
      </ResponsiveContainer>
    </ChartContainer>
  );
}

// --- Custom Tooltip Component ---
// Needs access to chartConfig, provided via context by ChartContainer
// Note: ChartTooltip and ChartTooltipContent likely use `useChart()` internally
function CustomTooltip({ active, payload, label }: any) {
  if (active && payload && payload.length) {
    const dataPoint = payload[0]; // Assuming only one Area ('parcels')
    const value = dataPoint.value;
    const color = dataPoint.payload.fill || dataPoint.color || "hsl(var(--primary))"; // Fallback color

    return (
      // Make sure ChartTooltip/Content are imported if used, or use plain divs
      <div className="rounded-lg border bg-background p-2 shadow-sm">
        <div className="grid grid-cols-[auto,1fr] items-center gap-2">
            <div className="flex flex-col gap-1">
                <span className="text-[0.70rem] uppercase text-muted-foreground">
                    {label} {/* Date */}
                </span>
                <span className="font-bold text-foreground">
                    {value} Parcels
                </span>
            </div>
        </div>
      </div>

      // --- OR If using the ChartTooltip/Content components ---
      /*
       <ChartTooltip className="bg-background border rounded-md shadow-lg p-2">
         <ChartTooltipContent>
           <div className="flex flex-col gap-1">
             <p className="text-sm font-medium text-foreground">{label}</p>
             <div className="flex items-center gap-2">
               <span
                 className="h-2 w-2 rounded-full"
                 style={{ backgroundColor: color }} // Use determined color
               />
               <p className="text-sm text-muted-foreground">
                 Parcels: <span className="font-semibold text-foreground">{value}</span>
               </p>
             </div>
           </div>
         </ChartTooltipContent>
       </ChartTooltip>
       */
    );
  }

  return null;
}